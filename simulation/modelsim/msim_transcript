# Reading H:/modelsim/modelsim_ase/tcl/vsim/pref.tcl 
# do Hometrainer_run_msim_rtl_vhdl.do 
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Copying H:\modelsim\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied H:\modelsim\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/hometrainer_fsm.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity hometrainer_fsm
# -- Compiling architecture behav of hometrainer_fsm
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/Timer.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity Timer
# -- Compiling architecture structural of Timer
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/SequentialDevider.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity SequentialDevider
# -- Compiling architecture hardware of SequentialDevider
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/seg_decoder.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity seg_decoder
# -- Compiling architecture behav of seg_decoder
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/prescaler.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity prescaler
# -- Compiling architecture behav of prescaler
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/HomeTrainer.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity HomeTrainer
# -- Compiling architecture structural of HomeTrainer
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/Hbrug.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity Hbrug
# -- Compiling architecture hardware of Hbrug
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/HallCounter.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity HallCounter
# -- Compiling architecture hardware of HallCounter
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/double.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity double_dabble_8bit
# -- Compiling architecture rtl_reg_ready of double_dabble_8bit
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/ADC.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity ADC
# -- Compiling architecture hardware of ADC
# vcom -93 -work work {C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/Ontdender.vhd}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity Ontdender
# -- Compiling architecture hardware of Ontdender
# 
# do "C:/Users/Richard/Documents/GitHub/PRODIG_Totaal/OntdenderSim.do"
# Name: tb_tut_minmax.do 
# Description: script for running simulation 
# Date: <the date> 
# Author: <your name> 
# Set transcript on 
# transcript on 
# Recreate the work directory and map to work 
# if {[file exists rtl_work]} { 
#  vdel -lib rtl_work -all 
# } 
# vlib rtl_work 
# vmap work rtl_work 
# Modifying modelsim.ini
# Compile the Tutorial description and testbench. Note the double 
# parent references in the path name 
# vcom -2008 -work work ../../Ontdender.vhd 
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity Ontdender
# -- Compiling architecture hardware of Ontdender
# vcom -2008 -work work ../../OntdenderSim.vhd 
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity OntdenderSim
# -- Compiling architecture behav of OntdenderSim
# Start the simulator with 1 ns time resolution 
# vsim -t 1ns -L rtl_work -L work -voptargs="+acc" OntdenderSim
# vsim -L rtl_work -L work -voptargs=\"+acc\" -t 1ns OntdenderSim 
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.numeric_std(body)
# Loading work.ontdendersim(behav)
# Loading work.ontdender(hardware)
# Log all signals in the design, good if the number
# of signals is small. 
# add log -r * 
# Add all toplevel signals to the list view 
# Add a number of signals of the simulated design 
# add list * 
# add list dut/* 
# Add all toplevel signals to the wave view 
# Add a number of signals inside the simulated design 
# add wave -divider "Inputs" 
# add wave Clk_10k
# add wave Knop
# 
# add wave -divider "intern"
# add wave dut/teller
# add wave dut/knop_int
# add wave dut/state
# 
# add wave -divider "Outputs" 
# add wave signal_int
# 
# Open Structure, List and Waveform window 
# view structure 
# .main_pane.structure.interior.cs.body.struct
# view list 
# .main_pane.list.interior.cs.body
# view wave 
# .main_pane.wave.interior.cs.body.pw.wf
# Run simulation for 600 ns 
# run 30 ms
# Fill up the wa
#  
